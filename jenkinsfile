pipeline{
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'NodeJs'
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('Docker_hub')
        SCANNER_HOME =tool 'sonar_scanner'
    }
    stages {
         stage("Clean work space"){
            steps{
                cleanWs()
            }
        }
        stage('checkout'){
            steps{
                git branch: 'prod', url: 'https://github.com/elisemomo/chat-gpt-clone.git'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=chat-gpt-clone \
                    -Dsonar.projectKey=chat-gpt-clone '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'Dependency-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.json"
            }
        }
        stage('Login to DockerHUB') {
            steps {
                script {
                    sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                    echo 'Login Succeeded'
                }
            }
        }
        stage("Docker Build and Push"){
            steps{
                script{
                       sh "docker build -t chat-gpt-clone ."

                       sh 'docker tag chat-gpt-clone:latest mukomelise/chat-gpt-clone:latest'
                       
                       sh "docker push mukomelise/chat-gpt-clone:latest"
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image mukomelise/chat-gpt-clone:latest > trivy.json"
            }
        }
        stage ("Remove container") {
            steps{
                sh "docker stop chat-gpt-clone | true"
                sh "docker rm chat-gpt-clone | true"
             }
        }
        stage('Deploy to container'){
            steps{
                sh 'docker run -d --name chatbot -p 3000:5050 mukomelise/chat-gpt-clone:latest'
            }
        }
    }
}